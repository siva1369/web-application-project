Real-Time End To End DevOps CI/CD Project :-
--------------------------------------------

https://github.com/jaiswaladi246/SpringBoot-WebApplication


first of all developer commit the code to git hub through webhook Jenkins pipeline get trigered 

gitcheck out = code get downloaded
code compile = to find the syntax based error in the code
unit tests = execute the all unit testcases what we are written
SonarQube = bugs, vulnerability, security
owasp = vulnerability 
build = using maven packageing the source code 
trivy = scan the docker image


create Jenkins environment install the below plugins


jdk
eclipse
loading plugin extension
OWASP
authentication token api
docker commons
docker api
docker
docker pipeline
java doc
maven
docker-build-step



install the tools

jdk
SonarQube
maven
dependency check
docker

 
trivy installation:-
-------------------

sudo apt-get update
sudo apt-get install -y apt-transport-https gnupg lsb-release
wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list

sudo apt-get update

sudo apt-get install trivy

trivy --version


for scan the image
trivy image <image-name>





pipeline {
    agent any
    tools{
        jdk 'jdk18'
        maven 'maven3'
    }
    
    environment{
        SCANNER_HOME = tool 'sonar-scanner'
    }
    

    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/jaiswaladi246/SpringBoot-WebApplication.git'
            }
        }
         stage('code compile') {
            steps {
                sh "mvn clean compile"
            }
        }
         stage('run test cases') {
            steps {
                sh "mvn test"
            }
        }
        stage('sonarqube analysis') {
            steps {
                 withSonarQubeEnv('sonar-server') {
                      sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Java-WebApp \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=Java-WebApp '''
                } 
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                   dependencyCheck additionalArguments: '--scan ./   ', odcInstallation: 'DP'
                   dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
       stage('Maven Build') {
            steps {
                    sh "mvn clean package"
            }
        }
        stage('Docker Build & Push') {
            steps {
                   script {
                       withDockerRegistry(credentialsId: '97f49438-8584-4213-8d5b-771f283ba994', toolName: 'docker') {
                            sh "docker build -t webapp ."
                            sh "docker tag webapp siva1369/webapp:latest"
                            sh "docker push siva1369/webapp:latest "
                        }
                   } 
            }
        }
        
        stage('Docker Image scan') {
            steps {
                    sh "trivy image siva1369/webapp:latest "
            }
        }
        stage('Docker container') {
            steps {
                   script {
                       withDockerRegistry(credentialsId: '97f49438-8584-4213-8d5b-771f283ba994', toolName: 'docker') {
                            sh "docker run --name webapp -d -p 8181:8080 siva1369/webapp:latest"
                            
                        }
                   } 
            }
        }

        
    }
}

 



 

